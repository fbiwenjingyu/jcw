<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ovit.jcw.mapper.DCBMapper">

	<!-- 根据表名和身份证查询数据-->
	<select id="queryJBXXData" resultType="java.util.Map" parameterType="java.util.Map">
	   SELECT * FROM DCB.DCB_JBXX  WHERE 1=1
		<if test="name != null and name != ''">
			AND XM like CONCAT('%',#{name,jdbcType=VARCHAR},'%')
		</if>
		<if test="card != null and card != ''">
			AND SFZH like CONCAT('%',#{card,jdbcType=VARCHAR},'%')
		</if>
		<if test="library != null and library != ''">
			AND LIBRARY  =#{library,jdbcType=VARCHAR}
		</if>
		<if test="(startTime != null and startTime != '') and (endTime != null and endTime != '') ">
			AND ADDDATE BETWEEN #{startTime,jdbcType=VARCHAR} AND #{endTime,jdbcType=VARCHAR}
		</if>
		<if test="opt == 1">
			AND to_days(ADDDATE) = to_days(now())
		</if>
		<if test="opt == 2">
			AND TO_DAYS(NOW()) - TO_DAYS(ADDDATE) = 1
		</if>
		<if test="opt == 4">
			AND DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt; date(ADDDATE)
		</if>
		<if test="opt == 5">
			AND DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt; date(ADDDATE)
		</if>
		ORDER BY ADDDATE DESC
	</select>
	<!-- 根据表名和身份证查询数据-->
	<select id="queryDataByTable" resultType="java.util.Map" parameterType="java.util.Map">
	SELECT * FROM DCB.${table}  where SFZH = #{sfzh}
   </select>


	<!-- 根据表名和身份证删除数据-->
	<delete id="deleteList"  parameterType="java.util.Map">
		delete from DCB.${table}
		<where> SFZH  in
			<foreach collection="list"  item="item" open="(" separator="," close=")">
				 #{item}
			</foreach>
		</where>
	</delete>

	<!-- 根据表名和身份证删除数据-->
	<delete id="deleteDataByTable"  parameterType="java.util.Map">
		delete from DCB.${table}  where SFZH = #{sfzh}
	</delete>

	<!-- 根据表名和身份证插入数据-->
	<insert id="insertData" parameterType="java.util.Map">
	     insert into DCB.${table}
			<foreach collection="map.keys" separator="," item="key" open="(" close=")">
				${key}
			</foreach>
				values
			<foreach collection="map.keys" item="key" separator="," open="(" close=")">
			#{map[${key}]}
			</foreach>
	</insert>

</mapper>